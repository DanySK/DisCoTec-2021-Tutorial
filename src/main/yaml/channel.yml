incarnation: protelis

variables:
  # max distance for considering two nodes as neighbours
  linkingDistance: &linkingDistance
    min: 0.1
    max: 0.9
    step: 0.1
    default: 0.3
  # the width of the channel between `source` and `distance`
  channelWidth: &channelWidth
    min: 1
    max: 5
    step: 0.1
    default: 1
  # random seed for scenario
  seedScenario: &seedScenario
    min: 0
    max: 10
    step: 1
    default: 0
  # random seed for scenario
  seedSimulation: &seedSimulation
    min: 0
    max: 10
    step: 1
    default: 0

# seeds to make the simulation reproducible
# comment for unpredictability
seeds:
  scenario: *seedScenario
  simulation: *seedSimulation

environment:
  # bi-dimensional euclidean space
  type: Continuous2DEnvironment

network-model:
  # nodes are considered as neighbours on a per-distance basis
  type: ConnectWithinDistance
  parameters:
    # the maximum distance after which nodes are no longer considered as neighbours
    - *linkingDistance

# custom object name with no particular semantics
# it is aimed at containing reactions to be referenced elsewhere
reactions:
  # re-usable set of reactions making a node perform a brownian movement
  # i.e. the node moves in a random direction of a given amount, repeatedly, once every while
  move: &move
    - # simple type of reaction which completely ignores any condition,
      # and tries to run every time the aforementioned time distribution wants it to run
      type: Event
      # "once every while" = with an exponential distribution having rate = 1
      time-distribution:
        type: ExponentialTime
        parameters: [1]
      # actions to be performed every time this
      actions:
        - type: BrownianMove
          parameters: [0.01]
  # re-usable set of reactions making a node execute an aggregate program and the spread its result to all its neighbours
  channel: &channel
    - # re-usable reaction making a node execute an aggregate program aimed at making devices laying
      # on the path connecting a source area and a destination area aware of laying in there.
      # the name of the aggregate program is `example:channel`
      # this implies a molecule named `example:channel` will appear on each node hosting this reaction,
      # at it will be updated every time the reaction is executed, to contain the result of the aggregate computation
      # (which is boolean, in the case of the channel2 function)
      program: |
        module example:channel

        import protelis:coord:spreading
        channel2(env.has("source"), env.has("destination"), env.get("width"))
      # the aggregate program is executed once every 1 seconds on each device (time dist. = dirac comb)
      # BUT devices are out of phase, meaning that their dirac combs are not starting in the same instant
      # BEWARE that this is a protelis-specific behaviour: one may specify the DiracComb time distribution
      # explicitly (as in the comments below) but this would make all devices executions synchronous,
      # which would make the simulation unrealistic
      time-distribution: 1
        # type: DiracComb
        # parameters: [1]

    # protelis-specific reaction aimed at making each device spread the result of its computational round to all its
    # neighbours, every time it is over
    - program: send

# declarative section aimed at displacing nodes in the environment
displacements:
  - # disposes as many nodes as possible in the 10x10 squared area centered in (0, 0), in a grid-like fashion
    in:
      # nodes are disposed in the 10x10 grid by letting a 0.25 distance separate them over both the vertical
      # and horizontal axes. notice that each node disposition is perturbed by a random vector uniformly drawn
      # from the 0.2-edged square centered in (0, 0)
      type: Grid
      parameters: [-5, -5, 5, 5, 0.25, 0.25, 0.1, 0.1]
    contents:
      - # puts a boolean molecule named `source` into the subset of nodes laying in the
        # bottom-left corner of the grid above. this identifies the nodes representing the source
        # of the path to be revealed by the aggregate computation
        in:
          type: Rectangle
          parameters: [-6, -6, 2, 2]
        molecule: source
        # the concentration (aka value) of the `source` molecule is `true`
        concentration: true
      - # puts a boolean molecule named `destination` into the subset of nodes laying in the
        # top-right corner of the grid above. this identifies the nodes representing the destination
        # of the path to be revealed by the aggregate computation
        in:
          type: Rectangle
          parameters: [4, 4, 6, 6]
        molecule: destination
        # the concentration (aka value) of the `destination` molecule is `true`
        concentration: true
      - # puts a numeric molecule named `width` into all nodes laying on the grid above.
        # this is aimed at "transmitting" the `channelWidth` variable above to all devices
        molecule: width
        concentration: *channelWidth
    programs:
      - *channel # add the channel reaction above to each node
#      - *move # add the channel reaction aboce to each node

# data to be logged out for each simulated event
export:
  - # the instant in simulated time
    time
  - # the total amount of nodes laying in the environment at that time
    number-of-nodes
  - # the total amount of nodes containing the `source` molecule,
    # attained by summing up all the concentrations of all the nodes containing this molecule
    # (true = 1, false = 0)
    molecule: source
    # nodes which do not contain the molecule are filtered out in summation
    value-filter: onlyfinite
    aggregators: [sum]
  - # the total amount of nodes containing the `destination` molecule,
    molecule: destination
    value-filter: onlyfinite
    aggregators: [sum]
    # the total amount of nodes laying on the path among the source area and the destination area,
    # attained by summing up the result of the `example:channel` aggregate program above
    # (which is boolean, thus true = 1, false = 0)
  - molecule: example:channel
    aggregators: [sum]